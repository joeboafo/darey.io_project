## WEB STACK IMPLEMENTATION (LEMP STACK)

## Step 0 – Preparing prerequisites
In order to complete this project you will need an AWS account and a virtual server with Ubuntu Server OS.

<img width="545" alt="Screenshot 2023-07-30 212439" src="https://github.com/joeboafo/darey.io_project/assets/135559039/83f525fb-c5fe-4f3a-857f-f52039e07198">
<img width="530" alt="Screenshot 2023-07-30 212609" src="https://github.com/joeboafo/darey.io_project/assets/135559039/03708e0a-be7e-4fc2-abf7-9c73082f6d72">
<img width="237" alt="Screenshot 2023-07-30 212714" src="https://github.com/joeboafo/darey.io_project/assets/135559039/73b087db-ea54-4460-ac80-3064ce3d96cd">

If you do not have an AWS account – go back to Project 1 Step 0 to sign in to AWS free tier account and create a new EC2 Instance of t2.micro family with Ubuntu Server 22.04 LTS (HVM) image. Remember, you can have multiple EC2 instances, but make sure you STOP the ones you are not working with at the moment to save available free hours.

Hint: In previous project we used Putty on Windows to connect to our EC2 Instance, but there is a simpler way that do not require conversion of .pem key to .ppk – using Git Bash.

Download and install Git Bash like it is shown in this video.

Launch Git Bash and run following command:

<img width="562" alt="Screenshot 2023-07-30 214133" src="https://github.com/joeboafo/darey.io_project/assets/135559039/3d41f849-8d5a-4e30-b4d4-c2277c3d4c1c">

<img width="616" alt="Screenshot 2023-07-30 214427" src="https://github.com/joeboafo/darey.io_project/assets/135559039/7f61711c-3ea9-4399-a35d-46b8be63574f">

## STEP 1 – INSTALLING THE NGINX WEB SERVER
Step 1 – Installing the Nginx Web Server
In order to display web pages to our site visitors, we are going to employ Nginx, a high-performance web server. We’ll use the apt package manager to install this package.

Since this is our first time using apt for this session, start off by updating your server’s package index. Following that, you can use apt install to get Nginx installed:

sudo apt update -y

<img width="956" alt="Screenshot 2023-07-30 215526" src="https://github.com/joeboafo/darey.io_project/assets/135559039/cadb60ce-d4c9-4e2f-8831-9e259c2d5b4f">


sudo apt install nginx

<img width="420" alt="Screenshot_20230131_103238" src="https://github.com/joeboafo/darey.io_project/assets/135559039/831116ff-7ec5-4885-ba3d-f1e2233b0c22">

sudo systemctl status nginx

<img width="890" alt="Screenshot 2023-07-30 224107" src="https://github.com/joeboafo/darey.io_project/assets/135559039/4ff70b6f-1828-4b79-9d17-c13e5ecf3378">

If it is green and running, then you did everything correctly – you have just launched your first Web Server in the Clouds!

Before we can receive any traffic by our Web Server, we need to open TCP port 80 which is default port that web browsers use to access web pages in the Internet.

As we know, we have TCP port 22 open by default on our EC2 machine to access it via SSH, so we need to add a rule to EC2 configuration to open inbound connection through port 80:
Our server is running and we can access it locally and from the Internet (Source 0.0.0.0/0 means ‘from any IP address’).

First, let us try to check how we can access it locally in our Ubuntu shell, run:

<img width="542" alt="Screenshot 2023-07-30 224634" src="https://github.com/joeboafo/darey.io_project/assets/135559039/08092c23-faab-4692-ba08-ee4ff4506d70">

##STEP 2 — INSTALLING MYSQL
Now that you have a web server up and running, you need to install a Database Management System (DBMS) to be able to store and manage data for your site in a relational database. MySQL is a popular relational database management system used within PHP environments, so we will use it in our project.

Again, use ‘apt’ to acquire and install this software:

sudo apt install mysql-server

<img width="1208" alt="Screenshot 2023-07-30 225555" src="https://github.com/joeboafo/darey.io_project/assets/135559039/b46d3504-ffa5-4bbf-8aea-bc023f0de1fb">

 sudo mysql
<img width="604" alt="Screenshot 2023-07-30 230041" src="https://github.com/joeboafo/darey.io_project/assets/135559039/518e0eb6-9c74-4741-b139-7d3728204748">

This will connect to the MySQL server as the administrative database user root, which is inferred by the use of sudo when running this command. You should see output like this:

Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 11
Server version: 8.0.22-0ubuntu0.20.04.3 (Ubuntu)

Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> 
It’s recommended that you run a security script that comes pre-installed with MySQL. This script will remove some insecure default settings and lock down access to your database system. Before running the script you will set a password for the root user, using mysql_native_password as default authentication method. We’re defining this user’s password as PassWord.1.

ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'PassWord.1';
Exit the MySQL shell with:

mysql> exit
<img width="977" alt="Screenshot 2023-07-30 230856" src="https://github.com/joeboafo/darey.io_project/assets/135559039/0b251150-125c-4055-aeea-624a477cac29">
sudo mysql_secure_installation
<img width="1280" alt="Screenshot 2023-07-30 231704" src="https://github.com/joeboafo/darey.io_project/assets/135559039/1106bcc3-7bbc-41e6-ba2c-9d290f5d9fa6">
<img width="611" alt="Screenshot 2023-07-30 232107" src="https://github.com/joeboafo/darey.io_project/assets/135559039/a1284698-d5f9-4eb9-9ec6-7d8c35a3fbb9">

STEP 3 – INSTALLING PHP
Step 3 – Installing PHP
You have Nginx installed to serve your content and MySQL installed to store and manage your data. Now you can install PHP to process code and generate dynamic content for the web server.

While Apache embeds the PHP interpreter in each request, Nginx requires an external program to handle PHP processing and act as a bridge between the PHP interpreter itself and the web server. This allows for a better overall performance in most PHP-based websites, but it requires additional configuration. You’ll need to install php-fpm, which stands for “PHP fastCGI process manager”, and tell Nginx to pass PHP requests to this software for processing. Additionally, you’ll need php-mysql, a PHP module that allows PHP to communicate with MySQL-based databases. Core PHP packages will automatically be installed as dependencies.

To install these 2 packages at once, run:

sudo apt install php-fpm php-mysql
When prompted, type Y and press ENTER to confirm installation.

You now have your PHP components installed. Next, you will configure Nginx to use them.
<img width="1280" alt="Screenshot 2023-07-30 234038" src="https://github.com/joeboafo/darey.io_project/assets/135559039/bb077147-faca-4706-bc07-5fdacba9b2ed">
## STEP 4 — CONFIGURING NGINX TO USE PHP PROCESSOR
When using the Nginx web server, we can create server blocks (similar to virtual hosts in Apache) to encapsulate configuration details and host more than one domain on a single server. In this guide, we will use projectLEMP as an example domain name.

On Ubuntu 20.04, Nginx has one server block enabled by default and is configured to serve documents out of a directory at /var/www/html. While this works well for a single site, it can become difficult to manage if you are hosting multiple sites. Instead of modifying /var/www/html, we’ll create a directory structure within /var/www for the your_domain website, leaving /var/www/html in place as the default directory to be served if a client request does not match any other sites.

Create the root web directory for your_domain as follows:

sudo mkdir /var/www/projectLEMP
Next, assign ownership of the directory with the $USER environment variable, which will reference your current system user:
<img width="1280" alt="Screenshot 2023-07-30 235531" src="https://github.com/joeboafo/darey.io_project/assets/135559039/62413392-7b84-4728-ba4f-712ad6f39ca1">
Then, open a new configuration file in Nginx’s sites-available directory using your preferred command-line editor. Here, we’ll use nano:

sudo nano /etc/nginx/sites-available/projectLEMP
This will create a new blank file. Paste in the following bare-bones configuration:

#/etc/nginx/sites-available/projectLEMP

server {
    listen 80;
    server_name projectLEMP www.projectLEMP;
    root /var/www/projectLEMP;

    index index.html index.htm index.php;

    location / {
        try_files $uri $uri/ =404;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
     }

    location ~ /\.ht {
        deny all;
    }

}


